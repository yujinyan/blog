{"version":3,"sources":["webpack:///path---define-constants-in-laravel-fccfb846b4b5dd164b0f.js","webpack:///./.cache/json/define-constants-in-laravel.json"],"names":["webpackJsonp","513","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,UAAAC,OAAA,cAAwCC,gBAAmBC,GAAA,0GAAAC,KAAA,09KAAs/KC,aAAqTL,MAAA,qBAAAM,KAAA,uBAA0DC,aAAgBC,KAAA,gCAAAC,UAAmDC,QAAUF,KAAA,aAAmBH,aAAgBL,MAAA,iBAAwBW,KAAA","file":"path---define-constants-in-laravel-fccfb846b4b5dd164b0f.js","sourcesContent":["webpackJsonp([252960951454375],{\n\n/***/ 513:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"🐟 Blog\",\"author\":\"Yu Jinyan\"}},\"markdownRemark\":{\"id\":\"C:/Users/yujin/code/blog-gatsby/posts/define-constants-in-laravel.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>在业务开发中有一些需要统一维护的字符串，比如 Redis 的键，接口错误码等。直接在代码中裸写字符串显然是非常糟糕的，因此比较理想的解决方案是将这些变量统一放在一个文件中，方便维护。</p>\\n<p>一般在 Laravel 中定义常量通常采用配置文件的形式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$value</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">config</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'app.value'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>但是配置文件是一个动态的数组。相比静态的常量定义，配置文件无法提供代码提示、重构等方便的优势。</p>\\n<p>由于 Laravel 框架在<code class=\\\"language-text\\\">app</code>路径下使用了 <code class=\\\"language-text\\\">PSR-4</code> autoload 规范，一个文件对应一个类，比较直接的做法是新建一个专门的<code class=\\\"language-text\\\">RedisKey</code>类，将需要的字符串定义为公共常量。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Constants<span class=\\\"token punctuation\\\">\\\\</span>RedisKey</span><span class=\\\"token punctuation\\\">;</span>\\n \\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">RedisKey</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'c:a:h'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n \\n<span class=\\\"token comment\\\">// 调用略显麻烦</span>\\n<span class=\\\"token variable\\\">$articleHtml</span> <span class=\\\"token operator\\\">=</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>RedisKey<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>此法的问题在于<code class=\\\"language-text\\\">Redis::get(RedisKey::ARTICLE_HTML_CACHE)</code>的调用略显繁琐，不够流畅，而且这个类也显得功能单薄比较积累。比较优雅的做法是希望能这样写：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$articleHtml</span> <span class=\\\"token operator\\\">=</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>为了能够引入定义的常量，我们需要自定义 composer 的 autoload 方式，修改项目的 <code class=\\\"language-text\\\">composer.json</code> 文件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javasc\\\"><code class=\\\"language-javasc\\\">{\\n  &quot;autoload&quot;: {\\n    &quot;files&quot;: [\\n      &quot;constants/Redis.php&quot;\\n    ]\\n  }\\n}</code></pre>\\n      </div>\\n<p>在 <code class=\\\"language-text\\\">constants/Redis.php</code> 中定义常量：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n \\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Constants<span class=\\\"token punctuation\\\">\\\\</span>Redis</span><span class=\\\"token punctuation\\\">;</span>\\n \\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'a:h:c'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">USER_FAC_COUNT</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'u:${uid}:f:c'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>由于常量定义的文件不是遵循 <code class=\\\"language-text\\\">PSR-4</code>，因此 <code class=\\\"language-text\\\">namespace</code> 可以自由定义，不一定和文件路径一一对应。参考目录结构如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">.\\n├── app/\\n├── ...\\n├── composer.json\\n├── composer.lock\\n├── config/\\n├── constants/\\n│    ├── Redis.php\\n│    ├── errcodes.php\\n│    ├── ...\\n├── database/\\n└── ...</code></pre>\\n      </div>\\n<p>在使用的时候可以直接将需要的常量 <code class=\\\"language-text\\\">use</code> 进来：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Constants<span class=\\\"token punctuation\\\">\\\\</span>Redis<span class=\\\"token punctuation\\\">\\\\</span>ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token variable\\\">$cache</span> <span class=\\\"token operator\\\">=</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这样的常量定义方法的好处包括：调用书写简洁优雅；充分利用静态定义的优势，编辑器自动提示、重构等功能支持一应俱全。目前看下来的缺点是在 <code class=\\\"language-text\\\">constants</code> 目录下每新加文件都需要修改 <code class=\\\"language-text\\\">composer.json</code> 文件并且运行 <code class=\\\"language-text\\\">composer dump-autoload</code> 命令。</p>\",\"frontmatter\":{\"title\":\"在 Laravel 中优雅地定义常量\",\"date\":\"December 16, 2017\"}}},\"pathContext\":{\"slug\":\"/define-constants-in-laravel/\",\"previous\":{\"fields\":{\"slug\":\"/flatmap/\"},\"frontmatter\":{\"title\":\"谈谈 `flatMap`\"}},\"next\":null}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---define-constants-in-laravel-fccfb846b4b5dd164b0f.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"🐟 Blog\",\"author\":\"Yu Jinyan\"}},\"markdownRemark\":{\"id\":\"C:/Users/yujin/code/blog-gatsby/posts/define-constants-in-laravel.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>在业务开发中有一些需要统一维护的字符串，比如 Redis 的键，接口错误码等。直接在代码中裸写字符串显然是非常糟糕的，因此比较理想的解决方案是将这些变量统一放在一个文件中，方便维护。</p>\\n<p>一般在 Laravel 中定义常量通常采用配置文件的形式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$value</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">config</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token single-quoted-string string\\\">'app.value'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>但是配置文件是一个动态的数组。相比静态的常量定义，配置文件无法提供代码提示、重构等方便的优势。</p>\\n<p>由于 Laravel 框架在<code class=\\\"language-text\\\">app</code>路径下使用了 <code class=\\\"language-text\\\">PSR-4</code> autoload 规范，一个文件对应一个类，比较直接的做法是新建一个专门的<code class=\\\"language-text\\\">RedisKey</code>类，将需要的字符串定义为公共常量。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Constants<span class=\\\"token punctuation\\\">\\\\</span>RedisKey</span><span class=\\\"token punctuation\\\">;</span>\\n \\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">RedisKey</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'c:a:h'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n \\n<span class=\\\"token comment\\\">// 调用略显麻烦</span>\\n<span class=\\\"token variable\\\">$articleHtml</span> <span class=\\\"token operator\\\">=</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span>RedisKey<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>此法的问题在于<code class=\\\"language-text\\\">Redis::get(RedisKey::ARTICLE_HTML_CACHE)</code>的调用略显繁琐，不够流畅，而且这个类也显得功能单薄比较积累。比较优雅的做法是希望能这样写：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token variable\\\">$articleHtml</span> <span class=\\\"token operator\\\">=</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>为了能够引入定义的常量，我们需要自定义 composer 的 autoload 方式，修改项目的 <code class=\\\"language-text\\\">composer.json</code> 文件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javasc\\\"><code class=\\\"language-javasc\\\">{\\n  &quot;autoload&quot;: {\\n    &quot;files&quot;: [\\n      &quot;constants/Redis.php&quot;\\n    ]\\n  }\\n}</code></pre>\\n      </div>\\n<p>在 <code class=\\\"language-text\\\">constants/Redis.php</code> 中定义常量：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n \\n<span class=\\\"token keyword\\\">namespace</span> <span class=\\\"token package\\\">Constants<span class=\\\"token punctuation\\\">\\\\</span>Redis</span><span class=\\\"token punctuation\\\">;</span>\\n \\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'a:h:c'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token constant\\\">USER_FAC_COUNT</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token single-quoted-string string\\\">'u:${uid}:f:c'</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>由于常量定义的文件不是遵循 <code class=\\\"language-text\\\">PSR-4</code>，因此 <code class=\\\"language-text\\\">namespace</code> 可以自由定义，不一定和文件路径一一对应。参考目录结构如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">.\\n├── app/\\n├── ...\\n├── composer.json\\n├── composer.lock\\n├── config/\\n├── constants/\\n│    ├── Redis.php\\n│    ├── errcodes.php\\n│    ├── ...\\n├── database/\\n└── ...</code></pre>\\n      </div>\\n<p>在使用的时候可以直接将需要的常量 <code class=\\\"language-text\\\">use</code> 进来：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-php\\\"><code class=\\\"language-php\\\"><span class=\\\"token delimiter important\\\">&lt;?php</span>\\n<span class=\\\"token keyword\\\">use</span> <span class=\\\"token package\\\">Constants<span class=\\\"token punctuation\\\">\\\\</span>Redis<span class=\\\"token punctuation\\\">\\\\</span>ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// ...</span>\\n<span class=\\\"token variable\\\">$cache</span> <span class=\\\"token operator\\\">=</span> Redis<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">:</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token constant\\\">ARTICLE_HTML_CACHE</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>这样的常量定义方法的好处包括：调用书写简洁优雅；充分利用静态定义的优势，编辑器自动提示、重构等功能支持一应俱全。目前看下来的缺点是在 <code class=\\\"language-text\\\">constants</code> 目录下每新加文件都需要修改 <code class=\\\"language-text\\\">composer.json</code> 文件并且运行 <code class=\\\"language-text\\\">composer dump-autoload</code> 命令。</p>\",\"frontmatter\":{\"title\":\"在 Laravel 中优雅地定义常量\",\"date\":\"December 16, 2017\"}}},\"pathContext\":{\"slug\":\"/define-constants-in-laravel/\",\"previous\":{\"fields\":{\"slug\":\"/flatmap/\"},\"frontmatter\":{\"title\":\"谈谈 `flatMap`\"}},\"next\":null}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/define-constants-in-laravel.json\n// module id = 513\n// module chunks = 252960951454375"],"sourceRoot":""}